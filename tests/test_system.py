#!/usr/bin/env python3
"""
Script de prueba para verificar funcionalidad del sistema
"""
import requests
import json
import time

BASE_URL = "http://127.0.0.1:17458"

def test_api():
    """Probar las nuevas APIs"""
    print("üß™ Iniciando pruebas del sistema...\n")
    
    # 1. Probar API de puertas
    print("1Ô∏è‚É£ Probando API de puertas...")
    try:
        response = requests.get(f"{BASE_URL}/api/doors")
        if response.status_code == 200:
            data = response.json()
            if data['success']:
                doors = data['doors']
                print(f"   ‚úÖ {len(doors)} puertas cargadas correctamente")
                for door_id, door in doors.items():
                    product = door.get('product')
                    if product:
                        print(f"   üì¶ {door_id}: {product['name']} - ‚Ç¨{product['price']} (Stock: {product['stock']})")
                    else:
                        print(f"   üì≠ {door_id}: Sin producto configurado")
            else:
                print("   ‚ùå Error en respuesta de API")
        else:
            print(f"   ‚ùå Error HTTP: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
    
    print()
    
    # 2. Probar modo reposici√≥n
    print("2Ô∏è‚É£ Probando modo reposici√≥n...")
    try:
        # Obtener estado actual
        response = requests.get(f"{BASE_URL}/api/restock/mode")
        if response.status_code == 200:
            data = response.json()
            current_mode = data['restock_mode']['active']
            print(f"   üìã Estado actual: {'ACTIVO' if current_mode else 'INACTIVO'}")
            
            # Simular presi√≥n del bot√≥n (solo Windows)
            print("   üîò Simulando presi√≥n del bot√≥n de reposici√≥n...")
            response = requests.post(f"{BASE_URL}/api/restock/simulate")
            if response.status_code == 200:
                data = response.json()
                new_mode = data['restock_mode']
                print(f"   ‚úÖ Modo cambiado a: {'ACTIVO' if new_mode else 'INACTIVO'}")
            else:
                print(f"   ‚ùå Error al simular bot√≥n: {response.status_code}")
        else:
            print(f"   ‚ùå Error al obtener estado: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    print()
    
    # 3. Probar reposici√≥n (solo si modo activo)
    print("3Ô∏è‚É£ Probando reposici√≥n de puerta A1...")
    try:
        # Verificar que modo est√© activo
        response = requests.get(f"{BASE_URL}/api/restock/mode")
        if response.status_code == 200:
            data = response.json()
            if data['restock_mode']['active']:
                # Hacer reposici√≥n
                restock_data = {
                    "quantity": 3,
                    "operator": "test_script",
                    "notes": "Prueba autom√°tica del sistema"
                }
                response = requests.post(f"{BASE_URL}/api/restock/door/A1", 
                                       json=restock_data)
                if response.status_code == 200:
                    data = response.json()
                    print(f"   ‚úÖ {data['message']}")
                    print(f"   üìä Nuevo stock: {data['new_stock']}")
                else:
                    print(f"   ‚ùå Error en reposici√≥n: {response.status_code}")
            else:
                print("   ‚ö†Ô∏è Modo reposici√≥n no activo, saltando prueba")
        else:
            print(f"   ‚ùå Error al verificar modo: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    print()
    
    # 4. Probar ventas del d√≠a
    print("4Ô∏è‚É£ Probando API de ventas...")
    try:
        response = requests.get(f"{BASE_URL}/api/sales/today")
        if response.status_code == 200:
            data = response.json()
            print(f"   üìà Ventas hoy: {data['total_sales']}")
            print(f"   üí∞ Total recaudado: ‚Ç¨{data['total_amount']:.2f}")
        else:
            print(f"   ‚ùå Error: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    print()
    
    # 5. Probar lista de productos
    print("5Ô∏è‚É£ Probando API de productos...")
    try:
        response = requests.get(f"{BASE_URL}/api/products")
        if response.status_code == 200:
            data = response.json()
            products = data['products']
            print(f"   üì¶ {len(products)} productos en base de datos")
            active_products = [p for p in products if p['active']]
            print(f"   ‚úÖ {len(active_products)} productos activos")
        else:
            print(f"   ‚ùå Error: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    print("\nüéâ Pruebas completadas!")

if __name__ == "__main__":
    test_api()
